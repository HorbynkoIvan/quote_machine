{"version":3,"sources":["actions/index.js","reducers/quotes.js","components/QuoteBox.js","App.js","actionTypes.js","API/functions.js","reducers/index.js","index.js"],"names":["data1","quote","QuoteBox","this","props","fetched","react_default","a","createElement","id","className","author","title","target","onClick","setNextQuote","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","fetchQuotes","components_QuoteBox","quotes","href","mapDispatchToProps","dispatch","type","axios","get","then","response","console","log","data","payload","catch","error","connect","store","colors","getRandomQuote","obj","quotesLength","length","randomIndex","Math","floor","random","setColor","randomColor","wrapper","document","querySelector","btnNew","btnTweet","btnTumblr","text","style","backgroundColor","color","borderColor","initialStates","combineReducers","state","arguments","undefined","action","objectSpread","createStore","reducers","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","es","src_App","getElementById"],"mappings":"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","file":"static/js/main.77e27f3e.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport {\r\n    FETCH_QUOTES_START,\r\n    FETCH_QUOTES_SUCCESS,\r\n    FETCH_QUOTES_FAILURE,\r\n    SET_NEXT_QUOTE\r\n} from \"../actionTypes\";\r\n\r\nconst URL = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json';\r\nlet data1;\r\nexport const fetchQuotes = () => {\r\n    return (dispatch) => {\r\n        dispatch({type: FETCH_QUOTES_START});\r\n        axios.get(URL)\r\n            .then(response => {\r\n                console.log(response.data);\r\n                data1 = response.data;\r\n                return dispatch({type: FETCH_QUOTES_SUCCESS, payload: response.data});\r\n            }).catch((error) => {\r\n            dispatch({type: FETCH_QUOTES_FAILURE});\r\n            throw (error)\r\n        })\r\n    }\r\n\r\n};\r\n\r\n\r\nexport const setNextQuote = () => {\r\n    return (dispatch) => {\r\n        dispatch({type: SET_NEXT_QUOTE, payload: data1})\r\n    }\r\n}","import {FETCH_QUOTES_START, FETCH_QUOTES_SUCCESS, FETCH_QUOTES_FAILURE, SET_NEXT_QUOTE} from \"../actionTypes\";\r\nimport {getRandomQuote, setColor} from \"../API/functions\";\r\n\r\nconst initialStates = {\r\n    quote: '',\r\n    author: ''\r\n};\r\nlet quote;\r\n\r\nexport default (state = initialStates, action) => {\r\n    switch (action.type) {\r\n        case FETCH_QUOTES_SUCCESS:\r\n            quote = getRandomQuote(action.payload);\r\n            setColor();\r\n            return {...state, ...quote};\r\n        /*  let temp = {...state, quotes: action.payload}\r\n          return temp.quotes;*/\r\n        //return Object.assign(state, action.payload);\r\n        case SET_NEXT_QUOTE:\r\n            quote = getRandomQuote(action.payload);\r\n            setColor();\r\n            return {...state, ...quote};\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport '../scss/qouteBox.scss';\r\nclass QuoteBox extends Component {\r\n    render() {\r\n        //debugger\r\n        let quote = this.props.fetched;\r\n        return (\r\n            <div id=\"quote-box\">\r\n                <div className=\"quote-text\">\r\n                    <i className=\"fa fa-quote-left\"> </i><span id=\"text\">{quote.quote}</span>\r\n                </div>\r\n                <div className=\"quote-author\">\r\n                    - <span id=\"author\">{quote.author}</span>\r\n                </div>\r\n                <div className=\"buttons\">\r\n                    <a className=\"button\" id=\"tweet-quote\" title=\"Tweet this quote!\" target=\"_blank\">\r\n                        <i className=\"fa fa-twitter\"></i>\r\n                    </a>\r\n                    <a className=\"button\" id=\"tumblr-quote\" title=\"Post this quote on tumblr!\" target=\"_blank\">\r\n                        <i className=\"fa fa-tumblr\"></i>\r\n                    </a>\r\n                    <button className=\"button\" id=\"new-quote\" onClick={this.props.setNextQuote}>New quote</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuoteBox;\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './scss/common.scss';\r\n\r\nimport QuoteBox from './components/QuoteBox';\r\nimport {fetchQuotes, setNextQuote} from \"./actions\";\r\n//import {getRandomQuote} from \"./API/functions\";\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.props.fetchQuotes()\r\n    }\r\n\r\n    render() {\r\n        //console.log(this.props.quotes)\r\n        return (\r\n            <div id=\"wrapper\">\r\n                <QuoteBox\r\n                    fetched={this.props.quotes}\r\n                    setNextQuote={this.props.setNextQuote}/>\r\n                <div className=\"myLink\"> by <a href=\"https://github.com/HorbynkoIvan/quote_machine_react\">DidIvan</a>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => ({\r\n    quotes: store.quotes\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    fetchQuotes, setNextQuote\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","export const FETCH_QUOTES_START = 'FETCH_QUOTES_START';\r\nexport const FETCH_QUOTES_SUCCESS = 'FETCH_QUOTES_SUCCESS';\r\nexport const FETCH_QUOTES_FAILURE = 'FETCH_QUOTES_FAILURE';\r\n\r\nexport const SET_NEXT_QUOTE = 'SET_NEXT_QUOTE';\r\n","const colors = [\r\n    '#e57373', '#f06292', '#b71c1c', '#880e4f', '#9c27b0', '#673ab7', '#4a148c', '#311b92', '#009688', '#4caf50', '#00bfa5', '#00c853', '#64dd17', '#5d4037', '#616161', '#607d8b', '#ff9100', '#ff3d00', '#ff6f00'\r\n];\r\n\r\nexport const getRandomQuote = (obj) => {\r\n    //debugger\r\n    let quotesLength = obj.quotes.length;\r\n    let randomIndex = Math.floor(Math.random() * quotesLength);\r\n    let quote = obj.quotes[randomIndex];\r\n    return quote;\r\n};\r\n\r\n\r\nexport const setColor = () => {\r\n    let randomColor = Math.floor(Math.random() * colors.length);\r\n    let wrapper = document.querySelector('#wrapper');\r\n    let btnNew = document.querySelector('#new-quote');\r\n    let btnTweet = document.querySelector('#tweet-quote');\r\n    let btnTumblr = document.querySelector('#tumblr-quote');\r\n    let text = document.querySelector('.quote-text');\r\n    let author = document.querySelector('.quote-author');\r\n\r\n    wrapper.style.backgroundColor = colors[randomColor];\r\n    text.style.color = colors[randomColor];\r\n    author.style.color = colors[randomColor];\r\n    btnNew.style.borderColor = colors[randomColor];\r\n    btnNew.style.color = colors[randomColor];\r\n\r\n    btnTweet.style.color = colors[randomColor];\r\n\r\n    btnTumblr.style.color = colors[randomColor];\r\n}\r\n\r\n","import {combineReducers} from 'redux';\r\nimport quotes from './quotes';\r\n//import quote from './getQuote';\r\n\r\nexport default combineReducers({\r\n    quotes\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport App from './App';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\nimport reducers from './reducers'\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(reducers, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    ,\r\n    document.getElementById('root'));\r\n\r\n\r\n"],"sourceRoot":""}